[manifest]
version = "1.0.0"
dump_lua = true
priority = 0

[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = '''
return generate_card_ui(self.config.center, nil, loc_vars, card_type, badges, hide_desc, main_start, main_end, self)
'''
position = "at"
payload = '''
local full_UI_table = generate_card_ui(self.config.center, nil, loc_vars, card_type, badges, hide_desc, main_start, main_end, self)
if self.ability and self.ability.hsr_extra_effects then
    full_UI_table.multi_box = full_UI_table.multi_box or {}
    local existing_mb = #full_UI_table.multi_box
    local increase = 0
    full_UI_table.box_colours = full_UI_table.box_colours or {}
    full_UI_table.main = full_UI_table.main or {}
    full_UI_table.main.main_box_flag = true
    for _,v in ipairs(self.ability.hsr_extra_effects) do
        local desc = v.description
        increase = increase + 1
        for i, box in ipairs(desc.text_parsed) do
            for j, line in ipairs(box) do
                local final_line = SMODS.localize_box(line, (v.key and ExtraEffects[v.key] and ExtraEffects[v.key].loc_vars and ExtraEffects[v.key].loc_vars({}, self, v.ability)) or {})
                full_UI_table.multi_box[existing_mb + increase] = full_UI_table.multi_box[existing_mb + increase] or {}
                full_UI_table.multi_box[existing_mb + increase][#full_UI_table.multi_box[existing_mb + increase]+1] = final_line
                if not next(full_UI_table.info) then full_UI_table.box_colours[i] = G.C.UI.BACKGROUND_WHITE end
            end
        end
    end
end
return full_UI_table
'''
match_indent = true